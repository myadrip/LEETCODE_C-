class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));
        
        for(int i = 0; i< board.size(); i++)
        {
            for(int j = 0; j < board[0].size(); j++)
            {
                if(board[i][j] == word[0])
                {
                    // starting point
                    // backtracking
                    visited[i][j] = true;       
                    if(helper(board, word, 1, i, j, visited))
                        return true;
                    visited[i][j] = false;                    
                }
            }
        }
        return false;
    }
    
    bool helper(vector<vector<char>>& board, string word, int index, int i, int j, vector<vector<bool>> &visited)
    {
        if(index == word.size())
            return true;
        
        int x[4] = {-1, 0, 1, 0};
        int y[4] = {0, -1, 0, 1};
        
        for(int adj = 0; adj < 4; adj++)
        {
            int new_x = i + x[adj];
            int new_y = j + y[adj];
            
            // range check
            if( new_x<0 || new_x>=board.size() || new_y<0 || new_y>=board[0].size() )
                continue;
            
            if(board[new_x][new_y] == word[index] && visited[new_x][new_y] == false)
            {
                // backtracking
                visited[new_x][new_y] = true;       
                if(helper(board, word, index+1, new_x, new_y, visited))
                    return true;
                visited[new_x][new_y] = false;
            }
        }
        return false;
    }
    
};
