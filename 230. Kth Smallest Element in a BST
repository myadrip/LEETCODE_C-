class Solution {
public:
    void search(TreeNode* root, vector<int>& v)
    {
        if(!root)
            return;
        v.push_back(root->val);
        search(root->left, v);
        search(root->right, v);
        return;
    }
    
    int kthSmallest(TreeNode* root, int k) 
    {
        std::vector<int> v;
        search(root, v);
        
        std::sort(v.begin(), v.end());
        
        return v[k-1];
    }
};

===============================================================================================
class Solution {
public:
    int traverse(TreeNode* root, int& k) 
    {
        if(!root)
            return -1;
        int temp = traverse(root->left, k);
        if(temp != -1)
            return temp;        

        if(k == 1)
            return root->val;
        k--;        
        temp = traverse(root->right, k);
        if(temp != -1)
            return temp;
        return -1;
    }
    int kthSmallest(TreeNode* root, int k) 
    {
        return traverse(root, k);
    }
};
===============================================================================================
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) 
    {
        int ans = 0;
        int index = 1;
        inorder_search(root, k, ans, index);
        
        return ans;
    }
    bool inorder_search(TreeNode* root, int &k, int& ans, int& index)
    {
        if(!root)
            return false;
        
        if(inorder_search(root->left, k, ans, index))
            return true;
        
        if( k == index)
        {
            ans = root->val;
            return true;
        }            
        index++;
        
        if(inorder_search(root->right, k, ans, index))
            return true;
        return false;
    }
};
