class LRUCache {
public:
    
    unordered_map<int, pair<int, int>> um;
    //um[key] = pair(value, timer);
    int iCapacity;
    int cnt;
    
    LRUCache(int capacity) {
        iCapacity = capacity;
        cnt = 0;
    }
    
    int get(int key) {
        auto iter = um.find(key);
        if(iter == um.end())
            return -1;
        else
        {
            um[key].second = cnt;
            cnt++;
            return um[key].first;
        }   
    }
    
    void put(int key, int value) {
        if(um.find(key) != um.end())
        {
            um[key] = make_pair(value, cnt);
            cnt++;
        }        
        else if(um.size() == iCapacity)
        {
            int remove_key = 0;
            int remove_cnt = INT_MAX;
            
            for(auto kv : um)
            {
                if(kv.second.second < remove_cnt)
                {
                    remove_cnt = kv.second.second;
                    remove_key = kv.first;
                }
            }
            um.erase(remove_key);
            
            um[key] = make_pair(value, cnt);
            cnt++;
        }
        else
        {
            um[key] = make_pair(value, cnt);
            cnt++;
        }
        
        
        return;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
