//https://leetcode.com/problems/longest-common-subsequence/

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) 
    {
        int n1 = text1.size();
        int n2 = text2.size();
        int** dp = (int**)malloc(sizeof(int*)*n1);
        for(int i = 0; i < n1; i++)
        {
            dp[i] = (int*)malloc(sizeof(int)*n2);
            memset(dp[i], 0x00, sizeof(int)*n2);
        }
        
        for(int row = 0; row < n1; row++)
        {
            for(int col = 0; col < n2; col++)
            {
                if(text1[row] == text2[col])
                {
                    if(row == 0 && col== 0)
                        dp[row][col] = 1;
                    else if(row == 0)
                        dp[row][col] = 1;
                    else if(col == 0)
                        dp[row][col] = 1;
                    else
                    {
                        dp[row][col] = dp[row-1][col-1]+1;
                    }                    
                }
                else
                {
                    if(row == 0 && col== 0)
                        dp[row][col] = 0;
                    else if(row == 0)
                        dp[row][col] = dp[row][col-1];
                    else if(col == 0)
                        dp[row][col] = dp[row-1][col];
                    else
                    {
                        dp[row][col] = std::max(dp[row][col-1], dp[row-1][col]);
                    }                    
                }
            }
        }
        int ret = dp[n1-1][n2-1];
        for(int i = 0; i < n1; i++)
            free(dp[i]);
        free(dp);
        
        return ret;
    }
};
