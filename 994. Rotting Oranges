class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int ans = 0;
        
        BFS(grid, row, col, ans);
        
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == 1)
                    return -1;
            }
        
        return ans;
    }
    
    void BFS(vector<vector<int>>& grid, int &row, int &col, int &ans)
    {
        int x[4] = {-1, 0, 1, 0};
        int y[4] = {0, -1, 0, 1};
        queue<pair<int, int >>q;
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
                if(grid[i][j] == 2)
                    q.push(make_pair(i, j));
        if(q.empty())
        {
            ans = 0;
            return;
        }
        ans = -1;
        
        while(!q.empty())
        {
            int n = q.size();
            
            while(n--)
            {
                auto tmp = q.front();
                q.pop();
                for(int i = 0; i < 4; i++)
                {
                    int new_x = tmp.first + x[i];
                    int new_y = tmp.second + y[i];
                    if(valid_check(grid, new_x, new_y) && grid[new_x][new_y] == 1)
                    {
                        grid[new_x][new_y] = 2;
                        q.push(make_pair(new_x, new_y));
                    }
                }
            }
            
            ans++;
        }
        return;
    }
    bool valid_check(vector<vector<int>>& grid, int i, int j)
    {
        int row = grid.size();
        int col = grid[0].size();
        
        if(i<0 || i>=row || j <0 || j>=col)
            return false;
        else
            return true;
    }
};
