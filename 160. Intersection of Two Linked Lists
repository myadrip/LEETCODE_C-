//https://leetcode.com/problems/intersection-of-two-linked-lists/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
    {
        ListNode* t1 = headA;
        ListNode* t2 = headB;
        int l1 = 0;
        int l2 = 0;
        
        while(t1 || t2)
        {
            if(t1)
            {
                l1++;
                t1 = t1->next;
            }
            if(t2)
            {
                l2++;
                t2 = t2->next;
            }
        }
        if(l1 == l2)
        {
            while(headA && headB)
            {
                if(headA == headB)
                    return headA;
                else
                {
                    headA = headA->next;
                    headB = headB->next;
                }
            }
            return NULL;            
        }
        else if(l1 > l2)
        {
            l1 = l1-l2;
            while(l1 >0)
            {
                headA = headA->next;
                l1--;
            }
            while(headA && headB)
            {
                if(headA == headB)
                    return headA;
                else
                {
                    headA = headA->next;
                    headB = headB->next;
                }
            }
            return NULL;            
            
        }
        else if(l1 < l2)
        {
            l2 = l2-l1;
            while(l2 >0)
            {
                headB = headB->next;
                l2--;
            }
            while(headA && headB)
            {
                if(headA == headB)
                    return headA;
                else
                {
                    headA = headA->next;
                    headB = headB->next;
                }
            }
            return NULL;   
        }
        return NULL;
        
    }
};
