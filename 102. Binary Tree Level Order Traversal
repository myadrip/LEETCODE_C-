//https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>> ret;
        if(root == NULL)
            return ret;        
        std::queue<TreeNode*> q;        
        TreeNode* tmp;
        
        q.push(root);
        int l1 = 1 ;
        int l2 = 0;        
        int size = 0;        
        ret.push_back(vector<int>());
        
        while(!q.empty())
        {
            if(l1 == 0)
            {
                l1 = l2;
                l2 = 0;
                size++;
                ret.push_back(vector<int>());
            }
            
            tmp = q.front();
            q.pop();
            ret[size].push_back(tmp->val);
            l1--;
            
            if(tmp->left)
            {
                q.push(tmp->left);
                l2++;
            }
            if(tmp->right)
            {
                q.push(tmp->right);
                l2++;
            }
        }        
        return ret;
    }
};

===========================================================================
