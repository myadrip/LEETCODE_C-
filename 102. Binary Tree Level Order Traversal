
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>> ans;
        vector<int> tmp;
        queue<TreeNode*> q;
        
        if(!root)
            return ans;
        
        q.push(root);
        
        
        while(!q.empty())
        {
            int n = q.size();
            
            while(n--)
            {
                TreeNode* node = q.front();
                q.pop();
                tmp.push_back(node->val);
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            ans.push_back(tmp);
            tmp.clear();
            
        }
        return ans;
    }
};


===========================================================================
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>> ret;
        if(root == NULL)
            return ret;        
        std::queue<TreeNode*> q;        
        TreeNode* tmp;
        
        q.push(root);
        int l1 = 1 ;
        int l2 = 0;        
        int size = 0;        
        ret.push_back(vector<int>());
        
        while(!q.empty())
        {
            if(l1 == 0)
            {
                l1 = l2;
                l2 = 0;
                size++;
                ret.push_back(vector<int>());
            }
            
            tmp = q.front();
            q.pop();
            ret[size].push_back(tmp->val);
            l1--;
            
            if(tmp->left)
            {
                q.push(tmp->left);
                l2++;
            }
            if(tmp->right)
            {
                q.push(tmp->right);
                l2++;
            }
        }        
        return ret;
    }
};

===========================================================================
