class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) 
    {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> ret;
        
        vector<vector<bool>> from_left_top(m, vector<bool>(n, false));
        vector<vector<bool>> from_righ_down(m, vector<bool>(n, false));
        
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(i == 0 || j == 0)
                    dfs(heights, i, j, from_left_top);
                if(i == m-1 || j == n-1)
                    dfs(heights, i, j, from_righ_down);
            }
        }
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(from_left_top[i][j] && from_righ_down[i][j])
                    ret.push_back({i, j});
            }
        }
        
        
        return ret;
    }
    
    void dfs(vector<vector<int>>& heights, int r, int c, vector<vector<bool>>& visited)
    {
        if(visited[r][c])
            return;
        
        visited[r][c] = true;
        
        int x[4] = {-1, 0, 1, 0};
        int y[4] = {0, -1, 0, 1};
        
        for(int i = 0; i < 4; i++)
        {
            int n_x = r +x[i];
            int n_y = c +y[i];
            
            if(n_x<0 || n_x>=heights.size() || n_y<0 || n_y>= heights[0].size())
                continue;
            if(heights[r][c] <= heights[n_x][n_y])
                dfs(heights, n_x, n_y, visited);
        }
        
        return;
    }
};


========================================================================================
class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> ret;
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(BFS(heights, i, j))
                    ret.push_back({i, j});
            }
        }
        return ret;
    }
    
    bool BFS(vector<vector<int>>& heights, int r, int c)
    {
        int x[4] = {-1, 0, 1, 0};
        int y[4] = {0, -1, 0, 1};
        int m = heights.size();
        int n = heights[0].size();
        
        set<pair<int, int>> visited;
        queue<pair<int, int>> q;
        q.push({r, c});
        
        bool left_top = false;
        bool right_botton = false;
        
        while(!q.empty())
        {
            auto tmp = q.front();
            q.pop();
            // visited check
            if(visited.find(tmp) != visited.end())
                continue;
            else
                visited.insert(tmp);
            
            // flag check
            if(tmp.first == 0 || tmp.second == 0)
                left_top = true;
            if(tmp.first == m-1 || tmp.second == n-1)
                right_botton = true;
            
            // adjacent
            for(int i = 0; i < 4; i++)
            {
                int new_x = tmp.first+x[i];
                int new_y = tmp.second+y[i];
                
                if(new_x<0 || new_x>=m || new_y<0 || new_y>=n)
                    continue;
                if(heights[new_x][new_y] <= heights[tmp.first][tmp.second])
                    q.push({new_x, new_y});
                // cout << r << ", " << c << " : " << new_x << ", " << new_y << endl;
            }
        }
        
        if(left_top && right_botton)
            return true;
        else
            return false;
    }
};
