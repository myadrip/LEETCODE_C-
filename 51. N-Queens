class Solution {
public:
    vector<vector<string>> ret;
    
    vector<vector<string>> solveNQueens(int n) {        
        vector<string> board(n, string(n, '.'));
        
        for(int i = 0; i < n; i++)
            helper(board, 0, i);        
        
        return ret;
    }
    void helper(vector<string> &board, int row, int col)
    {
        // cout << row <<", " << col << endl;
        for(int i = 0; i < row; i++)
        {
            if(board[i][col] == 'Q')
                return;
        }
        for(int i = row, j = col; i>=0 && j >=0; i--, j--)
        {
            if(board[i][j] == 'Q')
                return;
        }        
        
        for(int i = row, j = col; i>=0 && j <board[0].size(); i--, j++)
        {
            if(board[i][j] == 'Q')
                return;
        }
        
        board[row][col] = 'Q';
        
        if(row == board.size()-1)
        {
            ret.push_back(board);
            board[row][col] = '.';
            return;
        }
        
        for(int i = 0; i < board.size(); i++)
            helper(board, row+1, i);
            
        board[row][col] = '.';
        
        return;
    }
};
