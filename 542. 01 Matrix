class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        vector<vector<int>> ans(mat.size(), vector(mat[0].size(), 0));
        
        for(int i = 0;i < mat.size(); i++)
            for(int j = 0; j < mat[0].size() ;j++)
                if(mat[i][j] == 1)
                    ans[i][j] = helper(mat, i , j);
        
        return ans;
    }
    int helper(vector<vector<int>>& mat, int i , int j)
    {
        set<pair<int, int>> visited;
        queue<pair<int, int>> q;
        int row = mat.size();
        int col = mat[0].size();
        
        q.push(make_pair(i, j));
        
        int n = 0;
        
        while(!q.empty())
        {
            int s = q.size();
            
            while(s--)
            {
                auto tmp = q.front();
                q.pop();
                if(tmp.first <0 || tmp.first>= row || tmp.second<0 || tmp.second >=col)
                    continue;
                if(visited.find(make_pair(tmp.first, tmp.second)) != visited.end())
                    continue;
                visited.insert(make_pair(tmp.first, tmp.second));
                
                if(mat[tmp.first][tmp.second] == 1)
                {
                    q.push(make_pair(tmp.first-1, tmp.second));
                    q.push(make_pair(tmp.first+1, tmp.second));
                    q.push(make_pair(tmp.first, tmp.second-1));
                    q.push(make_pair(tmp.first, tmp.second+1));
                }
                else
                    return n;
            }
            n++;
            
        }
        return -1;
    }
};
