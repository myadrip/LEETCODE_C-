class Solution {
public:
    void func(vector<int>& preorder, vector<int>& inorder, TreeNode** root,
              int left, int right, vector<bool>& vec) 
    {
        if(left > right)
            return;
        *root = new TreeNode(preorder[left]);
        if(left == right)
            return;
        
        int index = -1;
        for(int i = 0; i<preorder.size(); i++)
        {
            if(preorder[left] == inorder[i])
            {
                vec[i] = true;
                index = i;
                break;
            }
        }
        int l = 1;
        int r = 1;
        
        while(index - l>=0 && vec[index - l] == false)
        {
            l++;
        }
        l--;
        
        while(index+r<inorder.size() && vec[index+r] == false)
        {
            r++;
        }
        r--;
        
    
        
        func(preorder, inorder, &((*root)->left), left+1, left+l,vec);
        func(preorder, inorder, &((*root)->right), left+l+1, left+l+r,vec);
        
        return ;
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        TreeNode* root = nullptr;
        if(preorder.size()==0)
            return root;
        
        vector<bool> vec(preorder.size(), false);
            
        func(preorder, inorder, &root, 0, preorder.size()-1,vec);
        return root;
    }
};
==========================================================================================

class Solution {
public:
    TreeNode* helper(vector<int>& preorder, int pre_start, int pre_end,
                     vector<int>& inorder, int in_start, int in_end)
    {
        
        if(pre_start > pre_end || in_start>in_end)
            return nullptr;
        // cout << "preorder:" << pre_start << " ~ "<< pre_end << endl;
        // cout << "inoder:" << in_start << " ~ "<< in_end << endl;
        int index_in_inorder = 0;
        int left_cnt = 0;
        int right_cnt = 0;
        
        for(int i = in_start; i <= in_end; i++)
        {
            if(preorder[pre_start] == inorder[i])
            {
                index_in_inorder = i;
                break;
            }
        }
        
        left_cnt = index_in_inorder - in_start;
        right_cnt = in_end - index_in_inorder;
        
        
        TreeNode* ret = new TreeNode(preorder[pre_start]);
        ret->left = helper(preorder, pre_start+1, pre_start+left_cnt, inorder, in_start, index_in_inorder-1);
        
        ret->right = helper(preorder, pre_start+left_cnt+1, pre_end, inorder, index_in_inorder+1, in_end);
        
        return ret;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        TreeNode* ret = helper(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1); 
        return ret;
    }
};
