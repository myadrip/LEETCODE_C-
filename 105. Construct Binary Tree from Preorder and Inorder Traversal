//https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func(vector<int>& preorder, vector<int>& inorder, TreeNode** root,
              int left, int right, vector<bool>& vec) 
    {
        if(left > right)
            return;
        *root = new TreeNode(preorder[left]);
        if(left == right)
            return;
        
        int index = -1;
        for(int i = 0; i<preorder.size(); i++)
        {
            if(preorder[left] == inorder[i])
            {
                vec[i] = true;
                index = i;
                break;
            }
        }
        int l = 1;
        int r = 1;
        
        while(index - l>=0 && vec[index - l] == false)
        {
            l++;
        }
        l--;
        
        while(index+r<inorder.size() && vec[index+r] == false)
        {
            r++;
        }
        r--;
        
    
        
        func(preorder, inorder, &((*root)->left), left+1, left+l,vec);
        func(preorder, inorder, &((*root)->right), left+l+1, left+l+r,vec);
        
        return ;
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        TreeNode* root = nullptr;
        if(preorder.size()==0)
            return root;
        
        vector<bool> vec(preorder.size(), false);
            
        func(preorder, inorder, &root, 0, preorder.size()-1,vec);
        return root;
    }
};
==========================================================================================

