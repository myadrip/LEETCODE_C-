//https://leetcode.com/problems/two-sum/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> ans;
        
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = i+1; j < nums.size(); j++)
            {
                if(nums[i]+nums[j] == target)
                {
                    ans.push_back(i);
                    ans.push_back(j);
                    return ans;
                }
            }
        }
        return ans;
    }
};
=================================================================================

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> ans;
        std::vector<int>::iterator Iter;
        
        
        for(int i = 0; i < nums.size(); i++)
        {
            Iter = find(nums.begin()+i+1, nums.end(), target-nums[i]);
            if( Iter != nums.end())
            {
                ans.push_back(i);
                ans.push_back(Iter - nums.begin());
                
                return ans;
            }
        }
        
        return ans;
        
    }
};
=================================================================================

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        unordered_map<int, int> imap;
        
        for(int i = 0; ; i++)
        {
            auto it = imap.find(target-nums[i]);
            if(it != imap.end())
            {
                std::cout << "first : " << it->first << "second: " << it->second << std::endl;
                return vector<int> {i, it->second};
            }
                
            imap[nums[i]] = i;
        }
        
    }
};
