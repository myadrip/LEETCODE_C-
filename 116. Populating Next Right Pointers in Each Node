/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        queue<Node*> q;
        
        if(root)
            q.push(root);
        
        while(!q.empty())
        {
            int n = q.size();
            Node* current = nullptr;
            Node* prev = nullptr;
            
            while(n--)
            {
                current = q.front();
                q.pop();
                if(current->left)
                    q.push(current->left);
                if(current->right)
                    q.push(current->right);
                if(prev)
                    prev->next = current;                
                prev = current;                
            }
            
            if(current)
                current->next = nullptr;
        }
        
        return root;
    }
};
