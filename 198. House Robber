//https://leetcode.com/problems/house-robber/

class Solution {
public:
    int rob(vector<int>& nums) 
    {
        if(nums.size() == 0)
            return 0;
        
        int* dp = (int*)malloc(sizeof(int)*nums.size());
        memset(dp, 0x00, sizeof(int)*nums.size());
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(i == 0)
            {
                dp[i] = nums[i];
            }
            else if(i == 1)
            {
                dp[i] = std::max(nums[i], nums[i-1]);
            }
            else
            {
                dp[i] = std::max(dp[i-1], nums[i]+dp[i-2]);
            }
        }
        
        int ret = dp[nums.size()-1];
        free(dp);
        return ret;
    }
};
====================================================================================
class Solution {
public:
    int rob(vector<int>& nums) 
    {
        int f0 = 0;
        int f1 = 0;
        int f2 = 0;
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(i == 0)
            {
                f0 = nums[i];
            }
            else if(i == 1)
            {
                f0 = std::max(nums[i], nums[i-1]);
                f1 = f0;
                f2 = nums[i-1];
            }
            else
            {
                f0 = std::max(f2+nums[i], f1);
                f2 = f1;
                f1 = f0;
            }
        }
        
        return f0;
        
    }
};

