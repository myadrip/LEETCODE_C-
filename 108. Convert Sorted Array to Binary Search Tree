//https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/


class Solution {
public:
    void func(vector<int>& nums, int left, int right, TreeNode** node) 
    {
        if(left > right)
            return;
        int mid = (right + left)/2;
        *node = new TreeNode(nums[mid]);
        func(nums, left, mid-1, &((*node)->left));
        func(nums, mid+1, right, &((*node)->right));
        return;        
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) 
    {
        TreeNode* root = nullptr;
        
        func(nums, 0, nums.size()-1, &root);
        
        
        return root;
    }
};
==============================================================================================================

class Solution {
public:
    TreeNode* helper_middle(int left, int right, vector<int>& nums)
    {
        if(left > right)
            return NULL;
        
        int mid = (left + right)/2;
        TreeNode* Node = new TreeNode(nums[mid]);
        
        Node->left = helper_middle(left, mid-1, nums);
        Node->right = helper_middle(mid+1, right, nums);
        
        return Node;
        
        
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) 
    {
        int len = nums.size();
        TreeNode* ret = helper_middle(0, len-1, nums);
        
        return ret;
    }
};
