/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    unordered_map<string, int> m;
    vector<TreeNode*> ans;
    
    string helper(TreeNode* root)
    {
        if(!root)
            return "##";
        string left = "#";
        string right = "#";
        
        if(root->left)
            left = helper(root->left);
        if(root->right)
            right = helper(root->right);
        
        string ret = to_string(root->val) +"#"+ left + "#" + right;
        
        m[ret]++;
        if(m[ret] == 2)
        {
            ans.push_back(root);
        }
        
        return ret;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) 
    {
        helper(root);
        
        return ans;
    }
};
