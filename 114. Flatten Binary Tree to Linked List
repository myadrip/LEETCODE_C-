//https://leetcode.com/problems/flatten-binary-tree-to-linked-list/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func(TreeNode* root, vector<TreeNode*>& vec)
    {
        if(!root)
            return;
        vec.push_back(root);
        
        func(root->left, vec);
        func(root->right, vec);
        return;
    }
    void flatten(TreeNode* root) 
    {
        vector<TreeNode*> vec;
        func(root, vec);
        
        for(int i = 0; i < vec.size(); i++)
        {
            if(i == vec.size()-1)
            {
                vec[i]->right = nullptr;
            }
            else
            {
                vec[i]->right = vec[i+1];
            }
            vec[i]->left = nullptr;
        }
        
    }
};
