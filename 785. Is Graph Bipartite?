class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) 
    {
        vector<int> visited(graph.size(), 0);
        queue<int> q;
        
        for(int i = 0; i < graph.size(); i++)
        {
            q.push(i);
            
            while(!q.empty())
            {
                int n = q.front();
                q.pop();
                
                if(visited[n] == 0)
                {
                    visited[n] = 1;
                    for(int i = 0; i < graph[n].size(); i++)
                    {
                        visited[graph[n][i]] = visited[n]*(-1);
                        q.push(graph[n][i]);
                    }                    
                }
                else
                {
                    for(int i = 0; i < graph[n].size(); i++)
                    {
                        if(visited[graph[n][i]] == 0)
                        {
                            visited[graph[n][i]] = visited[n]*(-1);
                            q.push(graph[n][i]);
                        }
                        else if(visited[graph[n][i]] == visited[n])
                        {
                            return false;
                        }
                    }                    
                }
            }
            
        }
        return true;
        
    }
};
