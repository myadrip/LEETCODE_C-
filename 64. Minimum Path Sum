//https://leetcode.com/problems/minimum-path-sum/

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) 
    {
        int row = grid.size();
        int col = grid[0].size();
        int** dp = (int**)malloc(sizeof(int*)*row);
        for(int i = 0; i < row; i++)
        {
            dp[i] = (int*)malloc(sizeof(int)*col);
            memset(dp[i], 0x00, sizeof(int)*col);
        }
        
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(i == 0 && j==0)
                    dp[i][j] = grid[i][j];
                else if(i == 0)
                    dp[i][j] = grid[i][j] + dp[i][j-1];
                else if(j == 0)
                    dp[i][j] = grid[i][j] + dp[i-1][j];
                else
                {
                    dp[i][j] = grid[i][j] + std::min(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        
        int ret = dp[row-1][col-1];
        
        for(int i = 0; i < row; i++)
            free(dp[i]);
        free(dp);
        return ret;
    }
};

====================================================================
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) 
    {
        int row = grid.size();
        int col = grid[0].size();
        
        vector<vector<int>> dp(row, vector<int>(col, 0));
        
        
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(i == 0 && j==0)
                    dp[i][j] = grid[i][j];
                else if(i == 0)
                    dp[i][j] = grid[i][j] + dp[i][j-1];
                else if(j == 0)
                    dp[i][j] = grid[i][j] + dp[i-1][j];
                else
                {
                    dp[i][j] = grid[i][j] + std::min(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        
        int ret = dp[row-1][col-1];
        
        
        return ret;
    }
};
