//https://leetcode.com/problems/permutations/

class Solution {
public:
    void func(vector<int>& nums, vector<vector<int>>& res, int begin)
    {
        if(begin == nums.size()-1)
        {
            res.push_back(nums);
            return;
        }
        
        for(int i = begin; i < nums.size(); i++)
        {
            swap(nums[begin], nums[i]);
            func(nums, res, begin+1);
            swap(nums[begin], nums[i]);
        }
        return;
    }
    
    vector<vector<int>> permute(vector<int>& nums)
    {
        vector<vector<int>> res;        
        func(nums, res, 0);
        return res;
    }
};

==========================================================================================
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<bool> visited(nums.size(), false);
        vector<int> tmp;
        DFS(nums, ans, visited, tmp);
        
        return ans;
    }
    void DFS(vector<int>& nums, vector<vector<int>> &ans, vector<bool> visited, vector<int> tmp)
    {
        if(tmp.size() == nums.size())
        {
            ans.push_back(tmp);
            return;
        }
        for(int i = 0;i < nums.size(); i++)
        {
            if(visited[i] == false)
            {
                tmp.push_back(nums[i]);
                visited[i] = true;
                DFS(nums, ans, visited, tmp);
                tmp.pop_back();
                visited[i] = false;
            }
        }
        
        return;
    }
    
};
