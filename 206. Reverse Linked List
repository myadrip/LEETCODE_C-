//https://leetcode.com/problems/reverse-linked-list/

class Solution {
public:
    ListNode* reverseList(ListNode* head) 
    {
        if(head == NULL)
            return NULL;
        ListNode* ret = NULL;
        ListNode* temp1 = head;
        ListNode* temp2 = nullptr;
        
        while(temp1)
        {
            temp2 = new ListNode(temp1->val);
            
            if(ret)
            {
                temp2->next = ret;
                ret = temp2;
            }
            else
            {
                ret = temp2;
            }
            temp1 = temp1->next;
        }
        
        return ret;
        
        
    }
};

============================================================================
class Solution {
public:
    ListNode* reverseList(ListNode* head) 
    {
        
        ListNode* P_prev = NULL;
        ListNode* P_next = NULL;
        
        while(head)
        {
            if(P_prev==NULL)
            {
                P_prev = head;
                head = head->next;
                P_prev->next = NULL;
            }
            else
            {
                P_next = head->next;
                head->next = P_prev;
                P_prev = head;
                head = P_next;
                
            }
        }
        
        return P_prev;
    }
};
============================================================================

class Solution {
public:
    ListNode* reverseList(ListNode* head) 
    {
        stack<int> s;
        ListNode* ret = nullptr;
        ListNode* tail = nullptr;
        
        while(head)
        {
            s.push(head->val);
            head = head->next;
        }
        
        while(!s.empty())
        {
            if(!ret)
            {
                ret = new ListNode(s.top());
                tail = ret;
            }
            else
            {
                tail->next = new ListNode(s.top());
                tail = tail->next;
                
            }
            
            s.pop();
            
        }
        return ret;
    }
};
============================================================================
class Solution {
public:
    ListNode* reverseList(ListNode* head) 
    {
        stack<ListNode*> s;
        ListNode* ret = nullptr;
        ListNode* ret_tail = nullptr;
        
        while(head)
        {
            s.push(head);
            head = head->next;
        }
        
        
        while(!s.empty())
        {
            ListNode* Node = s.top();
            s.pop();
            
            if(ret == nullptr)
            {
                ret = Node;
                ret_tail = ret;
            }
            else
            {
                ret_tail->next = Node;
                ret_tail = ret_tail->next;
            }
            ret_tail->next = NULL;
        }
        
        return ret;
        
    }
};
