// https://leetcode.com/problems/merge-two-sorted-lists/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        ListNode* head = nullptr;
        ListNode* tail = nullptr;
        int new_val = 0;
        
        while(l1 || l2)
        {
            if(l1 && l2)
            {
                if(l1->val > l2->val)
                {
                    new_val = l2->val;
                    l2 = l2->next;
                }
                else
                {
                    new_val = l1->val;
                    l1 = l1->next;
                }
            }
            else if(l1)
            {
                new_val = l1->val;
                l1 = l1->next;
            }
            else if(l2)
            {
                new_val = l2->val;
                l2 = l2->next;
            }
            
            if(head == nullptr)
            {
                head = new ListNode(new_val);
                tail = head;
            }
            else
            {
                tail->next = new ListNode(new_val);
                tail = tail->next;
            }
        }
        return head;
    }
};
==================================================================
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
    {
        ListNode* head = nullptr;
        ListNode* tail = nullptr;
        ListNode* new_val = 0;
        
        while(l1 || l2)
        {
            if(l1 && l2)
            {
                if(l1->val > l2->val)
                {
                    new_val = l2;
                    l2 = l2->next;
                }
                else
                {
                    new_val = l1;
                    l1 = l1->next;
                }
            }
            else if(l1)
            {
                new_val = l1;
                l1 = l1->next;
            }
            else if(l2)
            {
                new_val = l2;
                l2 = l2->next;
            }
            
            if(head == nullptr)
            {
                head = new_val;
                new_val->next = nullptr;
                tail = head;
            }
            else
            {
                tail->next = new_val;
                new_val->next = nullptr;
                tail = tail->next;
            }
        }
        
        return head;
    }
};
