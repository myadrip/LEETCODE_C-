//https://leetcode.com/problems/combination-sum/

class Solution {
public:
    void func(vector<int>& candidates, int& target,
              vector<vector<int>>& ret, vector<int>& tmp, int begin)
    {
        int sum = 0;
        for(auto& n : tmp)
            sum += n;
        if(sum == target)
        {
            ret.push_back(tmp);
            return;
        }
        else if(sum > target)
            return;
        
        for(int i = begin; i < candidates.size(); i++)
        {
            tmp.push_back(candidates[i]);
            func(candidates, target, ret, tmp, i);
            tmp.pop_back();
        }
        return;
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> ret;
        vector<int> tmp;
        
        for(int i = 0; i < candidates.size(); i++)
        {
            tmp.push_back(candidates[i]);
            func(candidates, target, ret, tmp, i);
            tmp.pop_back();
        }
        
        
        return ret;
    }
};

====================================================

