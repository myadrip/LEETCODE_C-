//https://leetcode.com/problems/valid-parentheses/
class Solution {
public:
    bool isValid(string s) 
    {
        stack<char> paren;
        
        for(auto& n : s)
        {
            switch(n)
            {
                case '(':
                case '{':
                case '[':
                    paren.push(n);
                    break;
                case ')':
                    if(paren.empty() || paren.top() != '(')
                        return false;
                    paren.pop();
                    break;
                case '}':
                    if(paren.empty() || paren.top() != '{')
                        return false;
                    paren.pop();
                    break;
                case ']':
                    if(paren.empty() || paren.top() != '[')
                        return false;
                    paren.pop();
                    break;
            }
        }
        
        if(paren.empty())
            return true;
        else
            return false;
    }
};
==================================================================================================
class Solution {
public:
    bool isValid(string s) 
    {
        std::map<char, char> buf1;
        buf1[')'] = '(';
        buf1['}'] = '{';
        buf1[']'] = '[';
        std::stack<char> buf2;
        
        for(auto& n : s)
        {
            if( n== '(' || n== '{' || n== '[')
                buf2.push(n);
            else
            {
                if(buf2.empty())
                    return false;
                if( buf1[n] != buf2.top() )
                    return false;
                buf2.pop();
                    
            }
        }
        if(buf2.empty())
            return true;
        else
            return false;
        
        
    }
};

