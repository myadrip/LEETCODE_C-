//https://leetcode.com/problems/palindrome-linked-list/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) 
    {
        stack<int> temp;
        ListNode* t1 = head;
        int l1 = 0;

        while(t1)
        {
            l1++;
            t1 = t1->next;
        }
        if(l1 < 2)
            return true;
        t1 = head;
        
        if(l1%2 == 0)
        {
            l1 = l1/2;
            while(l1 >0)
            {
                temp.push(t1->val);
                l1--;
                t1 = t1->next;
            }
            while(t1)
            {
                if(t1->val != temp.top())
                    return false;
                t1 = t1->next;
                temp.pop();
                
            }
            return true;
        }
        else
        {
            l1 = l1/2;
            
            while(l1 >0)
            {
                temp.push(t1->val);
                l1--;
                t1 = t1->next;
            }
            t1 = t1->next;
            
            while(t1)
            {
                if(t1->val != temp.top())
                    return false;
                t1 = t1->next;
                temp.pop();
                
            }
            return true;
        }
    }
};

====================================================================================

class Solution {
public:
    bool isPalindrome(ListNode* head) 
    {
        vector<int> temp;
        while(head)
        {
            temp.push_back(head->val);
            head = head->next;
        }
        for(int i = 0; i < temp.size()/2; i++)
        {
            if(temp[i] != temp[temp.size()-1-i])
                return false;
        }
        
        return true;
    }
};

====================================================================================
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverse(ListNode* head)
    {
        ListNode* cur = head;
        ListNode* prev = nullptr;
        ListNode* next = nullptr;
        
        while(cur)
        {
            next = cur->next;
            cur->next = prev;
            prev = cur;
            if(next == nullptr)
                return cur;
            cur = next;
        }
        return cur;
        
    }
    
    bool isPalindrome(ListNode* head) 
    {
        ListNode* rev_head = nullptr;
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next;
            fast = fast->next;
        }
        
        rev_head = reverse(slow);

        while(head && rev_head)
        {
            if(head->val != rev_head->val)
                return false;
            head = head->next;
            rev_head = rev_head->next;
            
        }
        
        return true;
    }
};



