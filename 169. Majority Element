//https://leetcode.com/problems/majority-element/


class Solution {
public:
    int majorityElement(vector<int>& nums) 
    {
        sort(nums.begin(), nums.end());
        
        return nums[nums.size()/2];
        
    }
};

=========================================================================================================

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int, int> m;
        int nsize = nums.size();
        
        for(auto& n : nums)
        {
            m[n]++;
            
            if(m[n] > nsize/2)
                return n;
        }
        
        return 0;   
    }
};

=========================================================================================================
//Boyer-Moore Majority Vote Algorithm

class Solution {
public:
    int majorityElement(vector<int>& nums) 
    {
        int major_index = 0;
        int cnt = 1;
        
        for(int i = 1; i < nums.size(); i++)
        {
            if(nums[i] == nums[major_index])
            {
                cnt++;
            }
            else
            {
                cnt--;
            }
            
            if(cnt == 0)
            {
                major_index = i;
                cnt = 1;
            }
        }
        
        return nums[major_index];
        
    }
};
