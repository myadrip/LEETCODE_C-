class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        
        helper(board, 0, 0);
    }
    
    bool helper(vector<vector<char>>& board, int i, int j)
    {
        if(i == 9)
            return true;
        if(j == 9)
            return helper(board, i+1, 0);
        if(board[i][j] !='.')
            return helper(board, i, j+1);
        
        
        for(char c = '1'; c<='9'; c++)
        {
            if(valid(board, i, j, c))
            {
                board[i][j] = c;
                if(helper(board, i, j+1))
                    return true;
                board[i][j] = '.';
            }
        }
        return false;
    }
    
    bool valid(vector<vector<char>>& board, int row, int col, int val)
    {
        for(int i = 0; i < 9; i++)
        {
            if(board[row][i] == val)
                return false;
        }
        for(int i = 0; i < 9; i++)
        {
            if(board[i][col] == val)
                return false;
        }
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(board[row-row%3+i][col-col%3+j] == val)
                    return false;
            }
        }
        return true;
    }
    
};
